Step-by-step Velero install (AWS example)

1. Prepare AWS S3 bucket & IAM user
Before installing Velero, you need:
An S3 bucket created (to store backups)
An IAM user with permissions to access S3 and create snapshots (EBS)


2. Create AWS credentials file for Velero
Create a file credentials-velero with this content (replace with your keys):


aws_access_key_id=YOUR_ACCESS_KEY_ID
aws_secret_access_key=YOUR_SECRET_ACCESS_KEY


  3. Install Velero with this command

velero install \
  --provider aws \
  --bucket your-s3-bucket-name \
  --secret-file ./credentials-velero \
  --backup-location-config region=your-region \
  --snapshot-location-config region=your-region 
(or) 

(snapshot or S3)

velero install \
  --provider aws \
  --plugins velero/velero-plugin-for-aws:v1.8.0 \
  --bucket <your-velero-bucket> \
  --backup-location-config region=<your-region> \
  --secret-file ./credentials-velero \
  --default-volumes-to-restic

This command will:

Create velero namespace automatically
Deploy Velero pods in that namespace
Configure Velero with your S3 bucket and credentials

    
    4. Verify installation
Run:

kubectl get pods -n velero
You should see velero pods running.

This command is to keep the credential in secretcredentials-velero (Access key and secret key)

  kubectl create secret generic cloud-credentials --namespace velero --from-file=credentials-velero

    5: Create your first backup
For example, to back up the police-db-ns namespace (where your database runs):


velero backup create police-db-backup --include-namespaces=police-db-ns --wait


    6: Check backup status and details

velero backup describe police-db-backup --details
This shows:

Which resources were backed up

If there were any errors

Metadata about the backup

    7(optional): Schedule automatic backups
If you want Velero to take backups regularly (e.g., daily at 2 AM):


velero schedule create daily-db-backup --schedule "0 2 * * *" --include-namespaces=police-db-ns

    8: Restore from backup (when needed)
To restore your DB namespace from a backup:

velero restore create --from-backup police-db-backup

    

    
    Why backup by namespace?
Backup by namespace lets you capture all resources related to your database at once (pods, PVCs, services, configs).

Database itself is just one part of the namespace; backing up the whole namespace ensures all dependent parts are included.
--wait makes the command wait until the backup finishes, so you get immediate feedback.

When you run the standard velero install command with the --provider flag (e.g., --provider aws), Velero automatically installs the correct cloud provider plugin as part of the deployment.

The plugin comes bundled with Velero’s installation manifests or is pulled automatically from Velero’s container images.

kindly update velero as it gets new updates.





1. List all backups

velero backup get

2. Create a backup

velero backup create <backup-name> --include-namespaces <namespace1,namespace2> --wait

3. Get details of a specific backup

velero backup describe <backup-name> --details

4. List all restores

velero restore get

5. Create a restore from a backup

velero restore create --from-backup <backup-name>

6. Get details of a specific restore

velero restore describe <restore-name> --details

7. Delete a backup

velero backup delete <backup-name>

8. Delete a restore

velero restore delete <restore-name>

9. Check Velero version and status

velero version
velero status

1. Create a scheduled backup
Create backups on a schedule (like cron jobs):


velero schedule create <schedule-name> --schedule="0 2 * * *" --include-namespaces <namespace>
Example:


velero schedule create daily-police-db --schedule="0 2 * * *" --include-namespaces police-db-ns
This creates a backup every day at 2 AM.

2. Backup with label selectors
Backup only resources matching specific labels:


velero backup create <backup-name> --selector <label-selector>
Example:


velero backup create police-app-backup --selector app=police-app


3. Restore only specific resources from a backup
Restore only certain namespaces, resources, or label selectors:

velero restore create --from-backup <backup-name> --include-namespaces <namespace> --selector <label-selector>
Example:


velero restore create --from-backup police-db-backup --include-namespaces police-db-ns --selector app=police-db


4. Exclude resources during backup
You can exclude certain resources or namespaces when backing up:


velero backup create <backup-name> --exclude-namespaces <namespace1,namespace2>


5. Backup only cluster-scoped resources
Backup resources like CRDs, ClusterRoles, etc.:


velero backup create <backup-name> --include-cluster-resources=true


6. Use hooks to execute commands before or after restore
You can define hooks in your backup or restore specs to run scripts/commands inside pods to prepare or clean up.

Example of a post-restore hook:


hooks:
  resources:
  - name: my-pod
    post:
      exec:
        command:
        - /bin/sh
        - -c
        - "echo Restore complete"
(You configure hooks via Velero backup or restore manifests.)

7. Check Velero logs
For troubleshooting:


kubectl logs deployment/velero -n velero

8. Changing Backup Storage Location
Velero supports multiple backup storage locations. You can create a new one or switch between them:


velero backup-location create <location-name> --provider <provider> --bucket <bucket-name> --config region=<region>


9. Restore with name remapping
Restore a backup but change the namespace of restored resources:


velero restore create --from-backup <backup-name> --namespace-mappings old-namespace:new-namespace


10. Restoring only persistent volumes
Velero can restore only PersistentVolumeClaims and PersistentVolumes if needed:


velero restore create --from-backup <backup-name> --include-resources persistentvolumeclaims,persistentvolume

1. Get detailed logs for a backup

velero backup logs <backup-name>
Example:


velero backup logs police-db-backup
Shows detailed logs from the backup process to troubleshoot any issues.

2. Get detailed logs for a restore

velero restore logs <restore-name>
Example:


velero restore logs restore-police-db
Shows detailed logs from the restore process.

3. Add a Velero plugin

velero plugin add <plugin-image>
Example:


velero plugin add velero/velero-plugin-for-aws:v1.2.0
Used when you want to add or update a cloud provider plugin.

4. Remove a Velero plugin

velero plugin remove <plugin-name>
Example:


velero plugin remove velero/velero-plugin-for-aws

5. Uninstall Velero from the cluster

velero uninstall
This removes Velero and its custom resources from your Kubernetes cluster.

6. Customize backup concurrency

velero backup create <backup-name> --concurrency <number>
Controls how many resources are backed up in parallel.

7. Customize restore concurrency

velero restore create --from-backup <backup-name> --concurrency <number>
Controls how many resources are restored in parallel.

8. Set backup timeout

velero backup create <backup-name> --backup-sync-period <duration>
Sets timeout for the backup sync.
